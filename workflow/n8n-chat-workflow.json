{
  "name": "Instagram Entries Assistant",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chat",
        "responseMode": "responseNode",
        "options": {
          "noResponseBody": false,
          "rawBody": false
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [-400, 0],
      "id": "92012fc9-a73b-4586-aa09-e04b144dee55",
      "name": "Webhook Trigger",
      "webhookId": "967d94cf-40d1-4f0d-ab3c-952c4b5ff7e3"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.body.message || $json.body.query || $json.body.text }}",
        "options": {
          "systemMessage": "You are a helpful assistant for the APPICS Instagram Special Bounty campaign database. You can answer queries about Instagram entries, participant data, and submission information.\n\nYou have access to 'Fetch Instagram Entries from Sheet' containing data with these EXACT column headers:\n- Date (submission dates from Dec 2017 to Oct 2019)\n- Instagram Account (URLs to Instagram profiles/posts)\n- Email (participant email addresses)\n- Telegram Username (without @ symbol)\n- Country (participant countries)\n- Followers (follower counts as numbers)\n- Post Type (Story/Post/Reel)\n- Reward Status (Paid/Pending/Rejected)\n- Engagement Rate (percentages like 4.2%)\n- Language (content language)\n- Age (participant age as number)\n- Gender (Male/Female)\n- Platform Joined (year they joined Instagram)\n- Bio Category (Business/Technology/Lifestyle/etc)\n- Verification Status (Verified/Unverified)\n- Payment Amount (dollar amounts like $25)\n- Submission Time (time of day)\n- Review Date (when reviewed)\n- Reviewer Notes (internal notes)\n\n**CRITICAL: Always use the tool first to get the data, then process it according to the user's request.**\n\n**IMPORTANT FIELD MAPPINGS:**\nWhen returning JSON, use these exact field names to match the frontend:\n- \"date\" (not \"Date\")\n- \"instagram_account\" (not \"Instagram Account\")\n- \"email\" (not \"Email\")\n- \"telegram_username\" (not \"Telegram Username\")\n- \"country\", \"followers\", \"post_type\", \"reward_status\", \"engagement_rate\", \"language\", \"age\", \"gender\", \"platform_joined\", \"bio_category\", \"verification_status\", \"payment_amount\", \"submission_time\", \"review_date\", \"reviewer_notes\"\n\n**Query Types You Handle:**\n1. **Data Requests**: Instagram accounts, emails, Telegram usernames, payment info\n2. **Sorting/Filtering**: Sort by date, find first/last entries, chronological order\n3. **Search**: Find by country, category, verification status, payment status\n4. **Analytics**: Payment statistics, country breakdown, engagement rates\n5. **Personal Questions**: Answer conversationally about the data\n\n**For Sorting Requests:**\nWhen user asks to \"sort by date\" or \"chronological order\":\n1. First fetch ALL data using the tool\n2. Parse dates properly (handle formats like \"Dec 26, 2017\", \"Jan 19, 2018\", \"Oct 25, 2019\")\n3. Sort entries chronologically from earliest (Dec 2017) to latest (Oct 2019)\n4. Return sorted results in JSON format with proper field names\n\n**Date Parsing Rules:**\n- Handle formats: \"Dec 26, 2017\", \"Jan 19, 2018\", \"Mar 5, 2018\", \"Apr 2, 2018\", etc.\n- Sort chronologically: Dec 2017 → Jan 2018 → Feb 2018 → ... → Oct 2019\n- Maintain exact date strings from CSV\n\n**Response Format Rules:**\n- **Lists/Multiple Results**: Always use JSON format with proper field mapping:\n```json\n{\n  \"results\": [\n    {\n      \"date\": \"Dec 26, 2017\",\n      \"instagram_account\": \"https://www.instagram.com/theglobopreneur/\",\n      \"email\": \"oluolu.gbenro@gmail.com\",\n      \"telegram_username\": \"theglobopreneur\",\n      \"country\": \"Nigeria\",\n      \"followers\": 5200,\n      \"reward_status\": \"Paid\",\n      \"payment_amount\": \"$25\",\n      \"bio_category\": \"Business\"\n    }\n  ],\n  \"total_found\": 1,\n  \"message\": \"Found 1 Instagram entry\"\n}\n```\n\n- **Single Results**: Natural language with specific answer\n- **Analytics**: Provide summaries with numbers and insights\n- **Conversational**: Friendly responses for greetings, thanks, general questions\n\n**Example Query Responses:**\n- \"Show Instagram accounts\" → JSON list with instagram_account URLs\n- \"Sort by date\" → JSON with ALL entries in chronological order (oldest first)\n- \"Who submitted first?\" → Find Dec 26, 2017 entry (theglobopreneur)\n- \"Payment statistics\" → Calculate total paid, pending, rejected amounts\n- \"Show paid entries\" → Filter by reward_status = \"Paid\"\n- \"Countries with most participants\" → Group by country, count entries\n- \"Verified accounts only\" → Filter by verification_status = \"Verified\"\n\n**Payment Status Values:** Paid, Pending, Rejected\n**Post Types:** Story, Post, Reel\n**Countries:** Nigeria, Germany, Indonesia, USA, India, Japan, Malaysia, Canada, etc.\n**Categories:** Business, Technology, Lifestyle, Finance, Sports, Art, Fashion, etc.\n\nAlways fetch data first with the tool, then process and format according to the user's specific request using the correct field names for the frontend."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [0, 0],
      "id": "9f98df40-ce8f-4ca6-9353-5b5510a8b1bf",
      "name": "AI Assistant Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [-200, 200],
      "id": "f351682c-323f-4b5d-8e75-12f631730ada",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "4gW5WSKRlsRU45u7",
          "name": "Google Gemini(PaLM) Api account 3"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [400, 0],
      "id": "d6e0f604-6ac0-4959-b450-66e80a824ac8",
      "name": "Send Response"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1rgU8zw9JJ_SnZBnyaZ3cFOt3ywLYc3Hc_fRVJEZdbl0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rgU8zw9JJ_SnZBnyaZ3cFOt3ywLYc3Hc_fRVJEZdbl0/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rgU8zw9JJ_SnZBnyaZ3cFOt3ywLYc3Hc_fRVJEZdbl0/edit#gid=0"
        },
        "options": {
          "useAppend": false
        }
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.6,
      "position": [200, 200],
      "id": "3ec24c4a-2885-4bee-977d-fb53d138cda2",
      "name": "Fetch Instagram Entries from Sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "MvOh7tc5S3DPXTy8",
          "name": "Google Sheets account 3"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "AI Assistant Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Assistant Agent": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Assistant Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Instagram Entries from Sheet": {
      "ai_tool": [
        [
          {
            "node": "AI Assistant Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "executionTimeout": 300,
    "timezone": "America/New_York"
  },
  "versionId": "19c801d7-b957-4c2d-8ba9-238ec5224c14",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "e1e25161edcb922a4ec53faf545a8791a0a8a87e3ae3aee193d5a9d80016605e"
  },
  "id": "AuwiTYhD0vx4Csfb",
  "tags": []
}
